name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize

env:
  BAZEL_STARTUP_FLAGS: --bazelrc=${{ github.workspace }}/.github/github.bazelrc

jobs:
  ci:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-20.04
          - os: windows-2019
    steps:
      # Checkout the code
      - uses: actions/checkout@v4

      - uses: bazel-contrib/setup-bazel@0.14.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Setup Bazelrc (Windows)
        run: |
          echo "TEMP=$env:RUNNER_TEMP" >> "$env:GITHUB_ENV"
          echo "TMP=$env:RUNNER_TEMP" >> "$env:GITHUB_ENV"
          echo "startup --output_user_root=D:/bzl" > ./user.bazelrc
        if: startswith(runner.os, 'Windows')
      - name: Setup Bazelrc
        run: |
          echo "common --keep_going" >> ./user.bazelrc

      # Build and Test the code
      - name: Test (Unix)
        run: bazel ${BAZEL_STARTUP_FLAGS[@]} test //... && bazel ${BAZEL_STARTUP_FLAGS[@]} run buildifier_check
        if: startswith(runner.os, 'Windows') != true
      - name: Test (Windows)
        run: bazel $env:BAZEL_STARTUP_FLAGS test //...
        if: startswith(runner.os, 'Windows')

  ci-aspects:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-20.04
          - os: windows-2019
    steps:
      # Checkout the code
      - uses: actions/checkout@v4

      - uses: bazel-contrib/setup-bazel@0.14.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Setup Bazelrc (Windows)
        run: |
          echo "TEMP=$env:RUNNER_TEMP" >> "$env:GITHUB_ENV"
          echo "TMP=$env:RUNNER_TEMP" >> "$env:GITHUB_ENV"
          echo "startup --output_user_root=D:/bzl" > ./user.bazelrc
        if: startswith(runner.os, 'Windows')
      - name: Setup Bazelrc
        run: |
          echo "common --keep_going" >> ./user.bazelrc
          echo "common --config=strict" >> ./user.bazelrc

      # Build and Test the code
      - name: Test (Unix)
        run: bazel ${BAZEL_STARTUP_FLAGS[@]} test //... && bazel ${BAZEL_STARTUP_FLAGS[@]} run buildifier_check
        if: startswith(runner.os, 'Windows') != true
      - name: Test (Windows)
        run: bazel $env:BAZEL_STARTUP_FLAGS test //...
        if: startswith(runner.os, 'Windows')

  ci-bazel-run:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-20.04
          - os: windows-2019
    steps:
      - uses: actions/checkout@v4
      - uses: bazel-contrib/setup-bazel@0.14.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Test (Unix)
        if: startswith(runner.os, 'Windows') != true
        run: |
          bazel ${BAZEL_STARTUP_FLAGS} run //python/venv/private/tests/bazel_free:greeter -- world --output=$(pwd)/data.txt

          if [[ "$(cat data.txt)" != "Hello, world"* ]]; then
            cat data.txt
            exit 1
          fi
      - name: Test (Windows)
        if: startswith(runner.os, 'Windows')
        run: |
          # Run the command and redirect output to data.txt
          & bazel $BAZEL_STARTUP_FLAGS run //python/venv/private/tests/bazel_free:greeter "--" world --output=$(pwd)/data.txt

          # Check if the contents of data.txt start with "Hello, world."
          if ((Get-Content data.txt) -notmatch "^Hello, world.*") {
              Get-Content data.txt
              exit 1
          }

  ci-lint-and-format:
    runs-on: ubuntu-20.04
    steps:
      # Checkout the code
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
      - name: Setup pip
        run: |
          python -m pip install --upgrade pip setuptools
      - name: Install dependencies
        run: |
          python -c 'import pathlib; print("\n".join([r.strip(" \\") for r in pathlib.Path("python/3rdparty/requirements_linux.txt").read_text().splitlines() if "==" in r]))' > requirements.txt
          python -m pip install -r requirements.txt --user
          rm requirements.txt

      - name: Run mypy
        run: |
          python -m mypy python
      - name: Run pylint
        run: |
          PYTHONPATH="$(pwd)" python -m pylint python
      - name: Run isort
        run: |
          python -m isort --check-only python
